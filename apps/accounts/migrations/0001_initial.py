# Generated by Django 5.2.6 on 2025-09-07 14:57

import apps.accounts.managers.user
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all permissions without explicitly assigning them.',
                        verbose_name='superuser status',
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={'unique': 'A user with that username already exists.'},
                        help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name='username',
                    ),
                ),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user can log into this admin site.',
                        verbose_name='staff status',
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                        verbose_name='active',
                    ),
                ),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True, help_text='When the record was initially created', verbose_name='Created At'
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True, help_text='When the record was last updated', verbose_name='Updated At'
                    ),
                ),
                (
                    'full_name',
                    models.GeneratedField(
                        db_persist=True,
                        expression=models.Case(
                            models.When(
                                condition=models.Q(
                                    models.Q(('first_name', ''), _negated=True),
                                    models.Q(('last_name', ''), _negated=True),
                                    ('first_name__isnull', False),
                                    ('last_name__isnull', False),
                                ),
                                then=django.db.models.functions.text.Concat(
                                    'first_name', models.Value(' '), 'last_name'
                                ),
                            ),
                            models.When(
                                condition=models.Q(
                                    models.Q(('last_name', ''), _negated=True), ('last_name__isnull', False)
                                ),
                                then='last_name',
                            ),
                            models.When(
                                condition=models.Q(
                                    models.Q(('first_name', ''), _negated=True), ('first_name__isnull', False)
                                ),
                                then='first_name',
                            ),
                            default=models.F('username'),
                            output_field=models.CharField(),
                        ),
                        help_text='Full name of the user',
                        output_field=models.CharField(max_length=300),
                        verbose_name='Full Name',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who created the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who last updated the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Updated By',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.permission',
                        verbose_name='user permissions',
                    ),
                ),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', apps.accounts.managers.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True, help_text='Is this record active or not', verbose_name='Is Active'
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True, help_text='When the record was initially created', verbose_name='Created At'
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True, help_text='When the record was last updated', verbose_name='Updated At'
                    ),
                ),
                (
                    'nickname',
                    models.CharField(
                        blank=True,
                        help_text='Nickname of the user in the organization',
                        max_length=100,
                        null=True,
                        verbose_name='Nickname',
                    ),
                ),
                (
                    'role',
                    models.CharField(
                        choices=[('owner', 'Owner'), ('admin', 'Admin'), ('manager', 'Manager'), ('member', 'Member')],
                        default='member',
                        help_text='User role in the organization',
                        max_length=20,
                        verbose_name='Role',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who created the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who last updated the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Updated By',
                    ),
                ),
                (
                    'user',
                    models.ForeignKey(
                        help_text='User that is a member of the team',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='members',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='User',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Member',
                'verbose_name_plural': 'Members',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True, help_text='Is this record active or not', verbose_name='Is Active'
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True, help_text='When the record was initially created', verbose_name='Created At'
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True, help_text='When the record was last updated', verbose_name='Updated At'
                    ),
                ),
                ('name', models.CharField(help_text='Organization name', max_length=255, verbose_name='Name')),
                ('slug', models.SlugField(help_text='Organization slug', unique=True, verbose_name='Slug')),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who created the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'owner',
                    models.ForeignKey(
                        blank=True,
                        help_text='Owner of the organization',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='owned_organizations',
                        to='accounts.member',
                        verbose_name='Owner',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who last updated the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Updated By',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Organization',
                'verbose_name_plural': 'Organizations',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='member',
            name='organization',
            field=models.ForeignKey(
                help_text='Organization to which the user belongs',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='members',
                to='accounts.organization',
                verbose_name='Organization',
            ),
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True, help_text='Is this record active or not', verbose_name='Is Active'
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True, help_text='When the record was initially created', verbose_name='Created At'
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True, help_text='When the record was last updated', verbose_name='Updated At'
                    ),
                ),
                (
                    'email',
                    models.EmailField(help_text='Email of the user to invite', max_length=254, verbose_name='Email'),
                ),
                (
                    'is_accepted',
                    models.BooleanField(
                        default=False, help_text='Is the invitation accepted by the user', verbose_name='Is Accepted'
                    ),
                ),
                (
                    'is_expired',
                    models.BooleanField(
                        default=False, help_text='Is the invitation expired', verbose_name='Is Expired'
                    ),
                ),
                (
                    'expired_at',
                    models.DateTimeField(
                        blank=True,
                        help_text='Date and time when the invitation will expire',
                        null=True,
                        verbose_name='Expired At',
                    ),
                ),
                (
                    'role',
                    models.CharField(
                        choices=[('owner', 'Owner'), ('admin', 'Admin'), ('manager', 'Manager'), ('member', 'Member')],
                        default='member',
                        help_text='User role in the organization',
                        max_length=20,
                        verbose_name='Role',
                    ),
                ),
                ('key', models.UUIDField(help_text='Key for the invitation', verbose_name='Key')),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who created the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who last updated the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Updated By',
                    ),
                ),
                (
                    'member',
                    models.OneToOneField(
                        blank=True,
                        help_text='Member associated with the invitation',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to='accounts.member',
                        verbose_name='Member',
                    ),
                ),
                (
                    'organization',
                    models.ForeignKey(
                        help_text='Organization to which the user is invited',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='invitations',
                        to='accounts.organization',
                        verbose_name='Organization',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Invitation',
                'verbose_name_plural': 'Invitations',
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='organizations',
            field=models.ManyToManyField(
                help_text='Organizations to which the user belongs',
                related_name='users',
                through='accounts.Member',
                through_fields=['user', 'organization'],
                to='accounts.organization',
                verbose_name='Organizations',
            ),
        ),
        migrations.CreateModel(
            name='OrganizationProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'is_active',
                    models.BooleanField(
                        default=True, help_text='Is this record active or not', verbose_name='Is Active'
                    ),
                ),
                (
                    'created_at',
                    models.DateTimeField(
                        auto_now_add=True, help_text='When the record was initially created', verbose_name='Created At'
                    ),
                ),
                (
                    'updated_at',
                    models.DateTimeField(
                        auto_now=True, help_text='When the record was last updated', verbose_name='Updated At'
                    ),
                ),
                (
                    'logo',
                    models.ImageField(
                        blank=True,
                        help_text='Organization logo',
                        null=True,
                        upload_to='organization/logos',
                        verbose_name='Logo',
                    ),
                ),
                (
                    'website',
                    models.URLField(blank=True, help_text='Organization website', null=True, verbose_name='Website'),
                ),
                (
                    'description',
                    models.TextField(
                        blank=True, help_text='Organization description', null=True, verbose_name='Description'
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who created the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Created By',
                    ),
                ),
                (
                    'organization',
                    models.OneToOneField(
                        help_text='Organization to which this profile belongs',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='profile',
                        to='accounts.organization',
                        verbose_name='Organization',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        help_text='User who last updated the record',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                        verbose_name='Updated By',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Organization Profile',
                'verbose_name_plural': 'Organization Profiles',
            },
        ),
        migrations.AlterUniqueTogether(
            name='member',
            unique_together={('nickname', 'organization'), ('user', 'organization')},
        ),
    ]
